
load_module         modules/ngx_http_headers_more_filter_module.so;
user nginx nginx;
worker_processes  4;
# error_log  /var/log/nginx/error.log warn;
# pid        /var/run/nginx.pid;
error_log           /dev/stderr;
pid                 /var/run/nginx.pid;

events { worker_connections  1024;}

http {
        log_format  main    '$remote_addr - $remote_user [$time_local] "$request" '
                            '$status $body_bytes_sent "$http_referer" '
                            '"$http_user_agent" "$http_x_forwarded_for"';
        access_log          /var/log/nginx/access.log  main;

        proxy_cache_path        /var/cache/nginx levels=1:2 keys_zone=one:8m max_size=3000m inactive=600m;
        proxy_temp_path         /var/tmp;
        include                 mime.types;
        default_type            application/octet-stream;
        sendfile                on;
        keepalive_timeout       65;
        server_tokens           off;
        
        gzip                    on;
        gzip_comp_level         6;
        gzip_vary               on;
        gzip_min_length         1000;
        gzip_proxied            any;
        gzip_types              text/plain text/css  application/javascript application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;
        gzip_buffers            16 8k;

        # HTTPS
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 24h;
        ssl_session_tickets off;
        ssl_prefer_server_ciphers on;
        ssl_protocols TLSv1.2;
        ssl_ciphers EECDH+CHACHA20:EECDH+AES;
        ssl_ecdh_curve X25519:prime256v1:secp521r1:secp384r1;

    
        ssl_certificate /etc/letsencrypt/live/${APP_SERVER_DOMAIN}/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/${APP_SERVER_DOMAIN}/privkey.pem;
      
        # List of backend api instances
        upstream api_servers {
            server ediredirapi-1:3000;
            server ediredirapi-2:3000;
            server ediredirapi-3:3000;
            server ediredirapi-4:3000;
            server ediredirapi-5:3000;
            server ediredirapi-6:3000;
            server ediredirapi-7:3000;
            server ediredirapi-8:3000;
        }

        # ------------------------
        # default - customer
        # ------------------------

        # Redirect www to HTTPS non-www
        server {
          listen 80;
          listen 443 ssl;
          http2 on;
          server_name   www.${APP_SERVER_DOMAIN};
          return 301    https://${APP_SERVER_DOMAIN}$request_uri;
        }

        # Redirect HTTP non-www to HTTPS non-www
        server {
          listen 80;
          server_name   ${APP_SERVER_DOMAIN};
          return 301    https://${APP_SERVER_DOMAIN}$request_uri;
        }

        server {
          listen   443 ssl;
          http2 on;
          server_name             ${APP_SERVER_DOMAIN};
          proxy_set_header        Host $host:443;
          proxy_set_header        X-Real-IP $remote_addr;
          proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header        X-Forwarded-Proto $scheme;

          error_page    404 = /main-maintenance.html;

          location / {
              root   /usr/share/nginx/html/customer;
              index  index.html;
              expires -1;
              add_header Pragma "no-cache";
              add_header Cache-Control "no-store, no-cache, must-revalidate, post-check=0, pre-check=0";
              try_files $uri$args $uri$args/ $uri $uri/ /index.html =404;
          }
          location /images/ {
              alias         /usr/share/nginx/html/images/;
              gzip_static   on;
              expires       max;
              add_header    Cache-Control public;
          }
          # Certbot
          location /.well-known/ {
            root /var/lib/certbot;
          }
        }


        # ------------------------
        # management ui (admin)
        # ------------------------

        # Redirect www to HTTPS non-www
        server {
          listen 80;
          listen 443 ssl;
          http2 on;
          server_name www.manage.${APP_SERVER_DOMAIN};
          return 301 https://manage.${APP_SERVER_DOMAIN}$request_uri;
        }

        # Redirect HTTP non-www to HTTPS non-www
        server {
          listen 80;
          server_name manage.${APP_SERVER_DOMAIN};
          return 301 https://manage.${APP_SERVER_DOMAIN}$request_uri;
        }

        server {
          listen 443 ssl;
          http2 on;
          server_name manage.${APP_SERVER_DOMAIN};
          proxy_set_header        Host $host:443;
          proxy_set_header        X-Real-IP $remote_addr;
          proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header        X-Forwarded-Proto $scheme;

          location /mariadbclient {
              resolver 127.0.0.11 valid=30s;
              set $upstream_mariadbclient ediradminer;
              proxy_pass http://$upstream_mariadbclient:8080;
              proxy_http_version 1.1;
              proxy_set_header Host               $host;
              proxy_set_header X-Real-IP          $remote_addr;
              proxy_set_header X-Forwarded-For    $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto  $scheme;
          }

          location /redisclient {
              resolver 127.0.0.11 valid=30s;
              set $upstream_redisclient rediscommander;
              proxy_pass http://$upstream_redisclient:8081;
              proxy_http_version 1.1;
              proxy_set_header Host               $host;
              proxy_set_header X-Real-IP          $remote_addr;
              proxy_set_header X-Forwarded-For    $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto  $scheme;
          }
          location /images/ {
              alias         /usr/share/nginx/html/images/;
              gzip_static   on;
              expires       max;
              add_header    Cache-Control public;
          }
          location / {
              root   /usr/share/nginx/html/admin;
              index  index.html;
              expires -1;
              add_header Pragma "no-cache";
              add_header Cache-Control "no-store, no-cache, must-revalidate, post-check=0, pre-check=0";
              try_files $uri$args $uri$args/ $uri $uri/ /index.html =404;
          }
          # Certbot
          location /.well-known/ {
            root /var/lib/certbot;
          }
        }

        # ------------------------
        # backend - api
        # ------------------------

        server {
          listen 443 ssl ;
          http2 on;
          server_name api.${APP_SERVER_DOMAIN};
          client_max_body_size 100M;
          resolver 127.0.0.11 valid=30s;

          location /api {
              proxy_set_header    Upgrade $http_upgrade;
              proxy_set_header    Connection 'upgrade';
              proxy_set_header    Host $host;
             
              proxy_set_header    X-Forwarded-For $remote_addr;  # this line
              proxy_cache_bypass  $http_upgrade; 
              proxy_set_header    X-Forwarded-Proto  $scheme;

              # THESE ARE IMPORTANT
             proxy_set_header    X-Real-IP       $remote_addr;
             proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;
             
             # This is what tells Connect that your session can be considered secure, 
             # even though the protocol node.js sees is only HTTP:
             proxy_set_header      X-NginX-Proxy true;
             proxy_read_timeout    5m;
             proxy_connect_timeout 5m;
             proxy_redirect        off;
             proxy_set_header Cookie $http_cookie;

             # proxy headers
             proxy_headers_hash_max_size     512;
             proxy_headers_hash_bucket_size  128;        
             proxy_pass          http://api_servers/api;
          }


          # Certbot
          location /.well-known/ {
            root /var/lib/certbot;
          }
        }
}

