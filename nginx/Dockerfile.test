
# ---------------------------------------
# Building stage
# ---------------------------------------
   FROM node:20-alpine AS builder

   RUN apk add tzdata && rm -rf /var/cache/apk/*
   
   ENV TZ=Africa/Addis_Ababa
   
   ENV NODE_ENV build
   
   RUN mkdir -p /home/apps/{admin,customer}
   
   WORKDIR /home/apps
   
   COPY   apps/package*.json ./
   
   RUN npm i --legacy-peer-deps && npm cache clean --force
   
   COPY  apps/ .
   
   RUN npm run build-uat && \
       npm prune --omit=dev --legacy-peer-deps
   
   # ---------------------------------------
   # Production stage
   # ---------------------------------------
   FROM alpine:3.14
   
   RUN apk add --no-cache \
       gcc \
       libc-dev \
       make \
       openssl-dev \
       pcre-dev \
       zlib-dev \
       linux-headers \
       curl \
       gnupg \
       libxslt-dev \
       gd-dev \
       certbot \
       geoip-dev \
       gettext
   
   ENV NGINX_VERSION nginx-1.26.0
   ENV MORE_HEADERS_VERSION 0.37
   
   RUN mkdir -p /usr/src && \
       curl -fSL https://nginx.org/download/${NGINX_VERSION}.tar.gz -o nginx.tar.gz && \
       curl -fSL https://github.com/openresty/headers-more-nginx-module/archive/v${MORE_HEADERS_VERSION}.tar.gz -o more-headers.tar.gz && \
       tar -zxC /usr/src -f nginx.tar.gz && \
       tar -zxC /usr/src -f more-headers.tar.gz && \
       rm nginx.tar.gz more-headers.tar.gz && \
       cd /usr/src/${NGINX_VERSION} && \
       ./configure --with-compat --add-dynamic-module=/usr/src/headers-more-nginx-module-${MORE_HEADERS_VERSION} --with-http_gzip_static_module --with-http_ssl_module --with-http_v2_module && \
       make && make install
   
   ENV PATH="/usr/local/nginx/sbin:${PATH}"
   
   # Create nginx user and group
   RUN addgroup -S nginx && adduser -S nginx -G nginx
   
   
   # Create log directory
   RUN mkdir -p /var/log/nginx
   
   # Set Node env as test
   ENV NODE_ENV test
   
   # Set Appropriate Timezone
   ENV TZ Africa/Addis_Ababa
   
   # Define build arguments
   ARG UID
   ARG GID
   
   # Define user and group environment variables
   ENV UID=$UID
   ENV GID=$GID
   
   # User and group id fallback
   ENV UID=${UID:-1001}
   ENV GID=${GID:-1001}
   
   # Copy entrypoint
   COPY ./nginx/entrypoint.sh /entrypoint.sh
   
   COPY ./nginx/public/404.html /usr/share/nginx/html/404.html
   COPY ./nginx/public/assets /usr/share/nginx/html/assets
   
   # Make entrypoint executable
   RUN chmod +x /entrypoint.sh
   
   # Copy nginx config test template
   COPY ./nginx/configs/nginx-test.conf  /etc/nginx/nginx-test.conf
   
   COPY --from=builder /home/apps/dist /usr/share/nginx/html
   
   # Indicate Entry point script
   ENTRYPOINT [ "../entrypoint.sh" ]
   
#    CMD ["nginx", "-g", "daemon off;"]
       

